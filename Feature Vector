#Import Libraries
import numpy as np
import pandas as pd
import tensorflow as tf
import math
from tensorflow import keras
from tensorflow.keras import backend as K
from tensorflow.keras import layers
from tensorflow.keras.layers import TextVectorization
from tensorflow.keras.preprocessing.sequence import pad_sequences
from keras.callbacks import ModelCheckpoint, EarlyStopping
from tensorflow.keras.models import load_model
import matplotlib.pyplot as plt
from tensorflow.keras.utils import to_categorical
from keras.layers import Dense, Dropout, GlobalAveragePooling1D, Flatten
from transformers import TFBertModel, BertTokenizer,BertConfig
from tensorflow.keras.layers.experimental.preprocessing import StringLookup
import re
import torch
import sklearn

tokenizer = BertTokenizer.from_pretrained("Rostlab/prot_bert", do_lower_case=False )
model = TFBertModel.from_pretrained("Rostlab/prot_bert", from_pt=True)

def seqToPhy(sequence, seqType,seqSize):
    
    PhyFeature = np.zeros((seqSize,9), dtype=float)
    length = len(sequence)
    if (seqSize<length):
        length = seqSize
        
    PhyArr = {
        'A': [71.0788 , 0.62 , -0.5 , 2.0 , 27.5 , 8.1 , 0.046 , 1.181 , 0.007187 ],
        'C': [103.1388 , 0.29 , -1.0 , 2.0 , 44.6 , 5.5 , 0.128 , 1.461 , -0.03661 ],
        'D': [115.0886 , -0.9 , 3.0 , 4.0 , 40.0 , 13.0 , 0.105 , 1.587 , -0.02382 ],
        'E': [129.1155 , -0.74 , 3.0 , 4.0 , 62.0 , 12.3 , 0.151 , 1.862 , 0.006802 ],
        'F': [147.1766 , 1.19 , -2.5 , 2.0 , 115.5 , 5.2 , 0.29 , 2.228 , 0.037552 ],
        'G': [57.0519 , 0.48 , 0.0 , 2.0 , 0.0 , 9.0 , 0.0 , 0.881 , 0.179052 ],
        'H': [137.1411 , -0.4 , -0.5 , 4.0 , 79.0 , 10.4 , 0.23 , 2.025 , -0.01069 ],
        'I': [113.1594 , 1.38 , -1.8 , 2.0 , 93.5 , 5.2 , 0.186 , 1.81 , 0.021631 ],
        'K': [128.1741 , -1.5 , 3.0 , 2.0 , 100.0 , 11.3 , 0.219 , 2.258 , 0.017708 ],
        'L': [113.1594 , 1.06 , -1.8 , 2.0 , 93.5 , 4.9 , 0.186 , 1.931 , 0.051672 ],
        'M': [131.1986 , 0.64 , -1.3 , 2.0 , 94.1 , 5.7 , 0.221 , 2.034 , 0.002683 ],
        'N': [114.1039 , -0.78 , 2.0 , 4.0 , 58.7 , 11.6 , 0.134 , 1.655 , 0.005392 ],
        'P': [97.1167 , 0.12 , 0.0 , 2.0 , 41.9 , 8.0 , 0.131 , 1.468 , 0.239531 ],
        'Q': [128.1307 , -0.85 , 0.2 , 4.0 , 80.7 , 10.5 , 0.18 , 1.932 , 0.049211 ],
        'R': [156.1875 , -2.53 , 3.0 , 4.0 , 105.0 , 10.5 , 0.18 , 1.932 , 0.049211 ],
        'S': [87.0782 , -0.18 , 0.3 , 4.0 , 29.3 , 9.2 , 0.062 , 1.298 , 0.004627 ],
        'T': [101.1051 , -0.05 , -0.4 , 4.0 , 51.3 , 8.6 , 0.108 , 1.525 , 0.003352 ],
        'V': [99.1326 , 1.08 , -1.5 , 2.0 , 71.5 , 5.9 , 0.14 , 1.645 , 0.057004 ],
        'W': [186.2132 , 0.81 , -3.4 , 3.0 , 145.5 , 5.4 , 0.409 , 2.663 , 0.037977 ],
        'Y': [163.176 , 0.26 , -2.3 , 3.0 , 117.3 , 6.2 , 0.298 , 2.368 , 0.023599 ]
    }
        
    for i in range(length):   
        PhyFeature[i] = PhyArr[sequence[i]]

    return PhyFeature

def idListOH(givenData, maxlen):
    
    # for data padding
    no_classes = 21    
    
    all_ids = ids_from_chars(tf.strings.unicode_split(givenData, 'UTF-8'))
    allIDList = []
    for ids in all_ids:
        allIDList.append(to_categorical(np.array(ids), num_classes=no_classes))
    return pad_sequences(allIDList, padding='post', maxlen = maxlen)

def idListBert(givenData, maxlen): 
    
    datasetWithSpace = []
    for seq in givenData:
        seqWithSpace = ''
        for c in seq:
            seqWithSpace = seqWithSpace+c+' '
        datasetWithSpace.append((seqWithSpace))

    ids = tokenizer.batch_encode_plus(datasetWithSpace, add_special_tokens=False, padding=True, return_tensors="tf")

    input_ids = ids['input_ids']
    attention_mask = ids['attention_mask']
    embedding = model(input_ids)[0]

    embedding = np.asarray(embedding)
    attention_mask = np.asarray(attention_mask)

    features = [] 
    for seq_num in range(len(embedding)):
        seq_len = (attention_mask[seq_num] == 1).sum()
        seq_emd = embedding[seq_num][0:seq_len]
        features.append(seq_emd)
    paddedSeq = pad_sequences(features, padding='post', maxlen = maxlen, dtype='float32')
    
    return paddedSeq

def getFoldedData(valid, test, channels):
    
    xTrainEpitope = []
    
    for foldNo in range(10):
        if foldNo==valid-1:
            xValidEpitope = np.array(foldedDataEpitopePhyPro[foldNo])
            xValidCDR3 = np.array(foldedDataCDR3PhyPro[foldNo])
            xValidEpitopeSeqOH = idListOH(np.array(foldedDataEpitopeSeq[foldNo]), maxlen = 13)
            xValidCDR3SeqOH = idListOH(np.array(foldedDataCDR3Seq[foldNo]), maxlen = 20)
            xValidEpitopeSeqBert = idListBert(np.array(foldedDataEpitopeSeq[foldNo]), maxlen = 13)
            xValidCDR3SeqBert = idListBert(np.array(foldedDataCDR3Seq[foldNo]), maxlen = 20)
            yValid = np.array(foldedDataTarget[foldNo])
            
        elif foldNo==test-1:
            xTestEpitope = np.array(foldedDataEpitopePhyPro[foldNo]) 
            xTestCDR3 = np.array(foldedDataCDR3PhyPro[foldNo])
            xTestEpitopeSeqOH = idListOH(np.array(foldedDataEpitopeSeq[foldNo]), maxlen = 13)
            xTestCDR3SeqOH = idListOH(np.array(foldedDataCDR3Seq[foldNo]), maxlen = 20)
            xTestEpitopeSeqBert = idListBert(np.array(foldedDataEpitopeSeq[foldNo]), maxlen = 13)
            xTestCDR3SeqBert = idListBert(np.array(foldedDataCDR3Seq[foldNo]), maxlen = 20)
            yTest = np.array(foldedDataTarget[foldNo])
            

        else:
            if (np.array_equal(xTrainEpitope,[])):
                xTrainEpitope = np.array(foldedDataEpitopePhyPro[foldNo]) 
                xTrainCDR3 = np.array(foldedDataCDR3PhyPro[foldNo])
                xTrainEpitopeSeqOH = idListOH(np.array(foldedDataEpitopeSeq[foldNo]), maxlen = 13)
                xTrainCDR3SeqOH = idListOH(np.array(foldedDataCDR3Seq[foldNo]), maxlen = 20)
                xTrainEpitopeSeqBert = idListBert(np.array(foldedDataEpitopeSeq[foldNo]), maxlen = 13)
                xTrainCDR3SeqBert = idListBert(np.array(foldedDataCDR3Seq[foldNo]), maxlen = 20)
                yTrain = np.array(foldedDataTarget[foldNo])
                
            else:
                xTrainEpitope = np.concatenate((xTrainEpitope, np.array(foldedDataEpitopePhyPro[foldNo])))
                xTrainCDR3 = np.concatenate((xTrainCDR3, np.array(foldedDataCDR3PhyPro[foldNo])))
                xTrainEpitopeSeqOH = np.concatenate((xTrainEpitopeSeqOH, idListOH(np.array(foldedDataEpitopeSeq[foldNo]), maxlen = 13)))
                xTrainCDR3SeqOH = np.concatenate((xTrainCDR3SeqOH, idListOH(np.array(foldedDataCDR3Seq[foldNo]), maxlen = 20)))
                xTrainEpitopeSeqBert = np.concatenate((xTrainEpitopeSeqBert, idListBert(np.array(foldedDataEpitopeSeq[foldNo]), maxlen = 13)))
                xTrainCDR3SeqBert = np.concatenate((xTrainCDR3SeqBert, idListBert(np.array(foldedDataCDR3Seq[foldNo]), maxlen = 20)))
                yTrain = np.concatenate((yTrain, np.array(foldedDataTarget[foldNo])))
        
    xTrainEpitope = xTrainEpitope[:,:,channels]
    xValidEpitope = xValidEpitope[:,:,channels]
    xTestEpitope = xTestEpitope[:,:,channels]
    xTrainCDR3 = xTrainCDR3[:,:,channels]
    xValidCDR3 = xValidCDR3[:,:,channels]
    xTestCDR3 = xTestCDR3[:,:,channels]
    
    return xTrainEpitope, xValidEpitope, xTestEpitope, xTrainCDR3, xValidCDR3, xTestCDR3, xTrainEpitopeSeqOH, xValidEpitopeSeqOH, xTestEpitopeSeqOH, xTrainCDR3SeqOH, xValidCDR3SeqOH, xTestCDR3SeqOH, xTrainEpitopeSeqBert, xValidEpitopeSeqBert, xTestEpitopeSeqBert, xTrainCDR3SeqBert, xValidCDR3SeqBert, xTestCDR3SeqBert, yTrain, yValid, yTest  

# Pre padded
def idListPhy(epitopeSeq, sizeEpitope, cdr3Seq, sizeCDR3): 
    
    maxMass =  186.2132
    minMass =  57.0519
    maxHydrophobicity =  1.38 
    minHydrophobicity =  -2.53
    maxHydrophilicity =  3.0 
    minHydrophilicity =  -3.4
    maxHydrogenBond =  4.0 
    minHydrogenBond =  2.0
    maxVolumeOfSideChains =  145.5 
    minVolumeOfSideChains =  0.0
    maxPolarity =  13.0 
    minPolarity =  4.9
    maxPolarizability =  0.409 
    minPolarizability =  0.0
    maxSASA =  2.663 
    minSASA =  0.881
    maxNCI =  0.239531 
    minNCI =  -0.03661

    lengthCurrentEpitope = len(epitopeSeq)
    lengthCurrentCDR3 = len(cdr3Seq)
    
    if lengthCurrentEpitope>sizeEpitope:
        lengthCurrentEpitope=sizeEpitope
        
    if lengthCurrentCDR3>sizeCDR3:
        lengthCurrentCDR3 = sizeCDR3
 
    
    CDR3Padding = sizeCDR3 - lengthCurrentCDR3
    epitopePadding = sizeEpitope - lengthCurrentEpitope
  
    epitopePhyProp = np.zeros((sizeEpitope,9))
    CDR3PhyProp = np.zeros((sizeCDR3,9))
    
    # Generate seqToPhy Array
    cdr3Phy = seqToPhy(cdr3Seq,'c',sizeCDR3)
    epitopePhy = seqToPhy(epitopeSeq,'e',sizeEpitope)
    
    # Split seqToPhy Array into individual physicochemical property array
    cdr3Mass= np.transpose(cdr3Phy[:,0:1])
    epitopeMass= np.transpose(epitopePhy[:,0:1])
    cdr3Hydrophobicity= np.transpose(cdr3Phy[:,1:2])
    epitopeHydrophobicity= np.transpose(epitopePhy[:,1:2])
    cdr3Hydrophilicity= np.transpose(cdr3Phy[:,2:3])
    epitopeHydrophilicity= np.transpose(epitopePhy[:,2:3])    
    cdr3HydrogenBond= np.transpose(cdr3Phy[:,3:4])
    epitopeHydrogenBond= np.transpose(epitopePhy[:,3:4])    
    cdr3VolumeOfSideChains= np.transpose(cdr3Phy[:,4:5])
    epitopeVolumeOfSideChains= np.transpose(epitopePhy[:,4:5])    
    cdr3Polarity= np.transpose(cdr3Phy[:,5:6])
    epitopePolarity= np.transpose(epitopePhy[:,5:6])    
    cdr3Polarizability= np.transpose(cdr3Phy[:,6:7])
    epitopePolarizability= np.transpose(epitopePhy[:,6:7])    
    cdr3SASA= np.transpose(cdr3Phy[:,7:8])
    epitopeSASA= np.transpose(epitopePhy[:,7:8])    
    cdr3NCI= np.transpose(cdr3Phy[:,8:9])
    epitopeNCI= np.transpose(epitopePhy[:,8:9])
    
    CDR3PhyProp[:lengthCurrentCDR3,0]=(((cdr3Mass-minMass)/(maxMass-minMass))+1)[:,:lengthCurrentCDR3]
    epitopePhyProp[:lengthCurrentEpitope,0]=(((epitopeMass-minMass)/(maxMass-minMass))+1)[:,:lengthCurrentEpitope]

    CDR3PhyProp[:lengthCurrentCDR3,1]=(((cdr3Hydrophobicity-minHydrophobicity)/(maxHydrophobicity-minHydrophobicity))+1)[:,:lengthCurrentCDR3]
    epitopePhyProp[:lengthCurrentEpitope,1]=(((epitopeHydrophilicity-minHydrophobicity)/(maxHydrophobicity-minHydrophobicity))+1)[:,:lengthCurrentEpitope]

    CDR3PhyProp[:lengthCurrentCDR3,2]=(((cdr3Hydrophilicity-minHydrophilicity)/(maxHydrophilicity-minHydrophilicity))+1)[:,:lengthCurrentCDR3]
    epitopePhyProp[:lengthCurrentEpitope,2]=(((epitopeHydrophilicity-minHydrophilicity)/(maxHydrophilicity-minHydrophilicity))+1)[:,:lengthCurrentEpitope]
    
    CDR3PhyProp[:lengthCurrentCDR3,3]=(((cdr3HydrogenBond-minHydrogenBond)/(maxHydrogenBond-minHydrogenBond))+1)[:,:lengthCurrentCDR3]
    epitopePhyProp[:lengthCurrentEpitope,3]=(((epitopeHydrogenBond-minHydrogenBond)/(maxHydrogenBond-minHydrogenBond))+1)[:,:lengthCurrentEpitope]
    
    CDR3PhyProp[:lengthCurrentCDR3,4]=(((cdr3VolumeOfSideChains-minVolumeOfSideChains)/(maxVolumeOfSideChains-minVolumeOfSideChains))+1)[:,:lengthCurrentCDR3]
    epitopePhyProp[:lengthCurrentEpitope,4]=(((epitopeVolumeOfSideChains-minVolumeOfSideChains)/(maxVolumeOfSideChains-minVolumeOfSideChains))+1)[:,:lengthCurrentEpitope]
    
    CDR3PhyProp[:lengthCurrentCDR3,5]=(((cdr3Polarity-minPolarity)/(maxPolarity-minPolarity))+1)[:,:lengthCurrentCDR3]
    epitopePhyProp[:lengthCurrentEpitope,5]=(((epitopePolarity-minPolarity)/(maxPolarity-minPolarity))+1)[:,:lengthCurrentEpitope]
    
    CDR3PhyProp[:lengthCurrentCDR3,6]=(((cdr3Polarizability-minPolarizability)/(maxPolarizability-minPolarizability))+1)[:,:lengthCurrentCDR3]
    epitopePhyProp[:lengthCurrentEpitope,6]=(((epitopePolarizability-minPolarizability)/(maxPolarizability-minPolarizability))+1)[:,:lengthCurrentEpitope]
    
    CDR3PhyProp[:lengthCurrentCDR3,7]=(((cdr3SASA-minSASA)/(maxSASA-minSASA))+1)[:,:lengthCurrentCDR3]
    epitopePhyProp[:lengthCurrentEpitope,7]=(((epitopeSASA-minSASA)/(maxSASA-minSASA))+1)[:,:lengthCurrentEpitope]
    
    CDR3PhyProp[:lengthCurrentCDR3,8]=(((cdr3NCI-minNCI)/(maxNCI-minNCI))+1)[:,:lengthCurrentCDR3]
    epitopePhyProp[:lengthCurrentEpitope,8]=(((epitopeNCI-minNCI)/(maxNCI-minNCI))+1)[:,:lengthCurrentEpitope]
    
    return epitopePhyProp, CDR3PhyProp
